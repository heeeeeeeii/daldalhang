<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: 서블릿의 요청 처리 인프라를 정의 -->
	
	<!-- 스프링 MVC @Controller 프로그래밍 모델 활성화 --> 
	<mvc:annotation-driven />

	<!-- ${webappRoot}/리소스 디렉토리에서 정적 리소스를 효율적으로 제공하여 /resource/** 에 대한 HTTP GET 요청을 처리
				<resources> : location에 대한 요청이 Spring MVC에 영향을 받아 직접 접근이 불가능한 경우
	                           이를 WAS 에게 위임하여 url로 resourse에 직접 접근 할 수 있도록 해줌.    
				* : 0 개 이상의 문자와 매칭 
				** : 0 개 이상의 디렉토리와 파일과 매칭 
				mapping="/resources/**" : /resources/ 의 하위 경로로 접근하는 모든 경로와 파일을
				location="/resources/" : /resources/ 디렉토리 에서 찾도록 함
	-->
	<mvc:resources mapping="/resources/**" location="/resources/" />

	<!-- @Controller 에서 /WEB-INF/views 디렉토리의 .jsp 리소스를 렌더링 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.ncs.daldal, service, dao, email, vo, interceptor" />
	
	<!-- 
		 Mybatis 설정 (DAO 역할을 xml 로 정의)
		 	- SqlSessionFactory -> SqlSessionTemplate
		 	- JDBC Connection, Mybatis 설정 : SQL 구문 등
		 	- Namespaces 추가
		 
		 SqlSessionFactory
		 	- MyBatis와 연동 시 DB연결과 SQL실행의 핵심 클래스
		 	- SqlSessionFactoryBean에 의해 생성됨
	-->
	
	<!-- mybatis SqlSessionFactoryBean -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 
			MyBatis 설정 파일의 위치를 지정  : 스프링 사용시에는 없어도 됨 
			<beans:property name="configLocation" value="classpath:/mybatis-config.xml" />  -->
		<beans:property name="dataSource" ref="dataSource"/>
		<!-- 
			SQL문이 있는 xml파일(mapper) 의 위치를 지정 
		 	- mappers 폴더내의 모든 폴더의 *Mapper.xml 을 인식  
		 	- ~~Mapper.java 를 사용하는 경우에는 아래  mapperLocations 를 설정하지 않아도 됨 --> 
		<beans:property name="mapperLocations" value="classpath:/mappers/**/*Mapper.xml"/>		
	</beans:bean>

	<!-- 
		 SqlSessionTemplate
		 	- DAO의 연결 & Close 기능, SQL문 처리 담당
		 	- Mapper의 Sql 구문을 이용해 DAO의 요청을 처리
		 	- sqlSessionFactory를 생성자로 주입하여 설정
	-->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"
				destroy-method="clearCache">
		<beans:constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</beans:bean>
		
	<!-- MariaDB 연결 -->
	<beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="org.mariadb.jdbc.Driver" />
		<beans:property name="url" value="jdbc:mariadb://35.223.4.200:3306/daldalhang" /> <!-- 서버 외부 주소 -->
		<beans:property name="username" value="daldalhang" />
		<beans:property name="password" value="dalhang2020" />
	</beans:bean>
	
	<!-- 회원가입 인증 메일 보내기 -->
    <beans:bean id="mailSender" class = "org.springframework.mail.javamail.JavaMailSenderImpl">
      <beans:property name="host" value="smtp.gmail.com" />
      <beans:property name="port" value="587" />
      <beans:property name="username" value="daldalhang2020@gmail.com" /> <!-- 구글 아이디 -->
      <beans:property name="password" value="dal@hang2020" /> <!-- 구글 비밀번호 -->
   
      <beans:property name="javaMailProperties">
         <beans:props>
               <beans:prop key="mail.transport.protocol">smtp</beans:prop>
               <beans:prop key="mail.smtp.auth">true</beans:prop>
               <beans:prop key="mail.smtp.starttls.enable">true</beans:prop>
               <beans:prop key="mail.debug">true</beans:prop>
         </beans:props>
      </beans:property>
    </beans:bean>
    
    <!-- 
    	이미지(파일) 업로드 = MultipartFile 	
			- 대부분의  Resolver 로 끝나는 클래스의 경우에는 이미 정해져 있기 때문에 (id = multipartResolver) 변경 불가
			- maxUploadSize 지정하지 않으면 default = -1 이며 크기가 무제한 
	-->	
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="-1" />
	</beans:bean> 
	
	<!-- Google 소셜 로그인 연결 설정 -->
    <beans:bean id="googleOAuth2Template"
        class="org.springframework.social.google.connect.GoogleOAuth2Template">
  		<beans:constructor-arg value="771757649911-vakhnpdq4sm5bdri1m3pokbm5tj04007.apps.googleusercontent.com" />
  		<beans:constructor-arg value="dbcI3lEYoEm3uo2O12NsZhSm" />
    </beans:bean>
    
 	<beans:bean id="googleOAuth2Parameters" class="org.springframework.social.oauth2.OAuth2Parameters">
 		<beans:property name="scope" value="email"></beans:property>
 		<!-- <beans:property name="redirectUri" value="http://localhost:8080/daldal/home"/> 서버 -->
 		<beans:property name="redirectUri" value="http://daldalhang.appspot.com/daldal/home"/> <!-- 서버 -->
 	</beans:bean>
 	
 	<!-- JsonView 설정 -->
	<beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView"/>
	<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
	<beans:property name="order" value="1"></beans:property>
	</beans:bean>
 
 	<!-- Exception (예외처리) 설정 -->
 	<!-- 
	<beans:bean id="exceptionResolver" 
				class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<beans:property name="exceptionMappings">
			<beans:props>
			// 스프링 하에서 발생된 Exception 은 Spring 의  Exception 객체를 사용해야 정확하게 인식
				<beans:prop key="org.springframework.dao.DuplicateKeyException">
					errorPage/dupExceptionMessage</beans:prop>
				<beans:prop key="org.springframework.jdbc.UncategorizedSQLException">
					errorPage/sqlexceptionMessage</beans:prop>
				<beans:prop key="java.lang.IllegalArgumentException">
					errorPage/ilexceptionMessage</beans:prop>	
				<beans:prop key="java.lang.ArithmeticException">
					errorPage/arexceptionMessage</beans:prop>
				<beans:prop key="java.lang.NullPointerException">
					errorPage/npException</beans:prop>
			</beans:props>
		</beans:property>
		<beans:property name="defaultErrorView" 
						value="errorPage/exceptionMessage" />
	</beans:bean>
	-->
	
 	<!-- 회원 인터셉터 객체 생성 -->
	<beans:bean id="loginInterceptor" class="interceptor.LoginInterceptor" />
	
	<!-- 회원 인터셉터 설정 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<!-- 전체를 지정하고 제외경로 지정 
			<mapping path="/**"/>  
			<exclude-mapping path="join"/>
			-->
			<mvc:mapping path="/mypagef"/> <!-- 내 정보  -->
			<mvc:mapping path="/myLikelist"/> <!-- 좋아요 목록 -->
			<mvc:mapping path="/pwupdate"/> <!-- 비밀번호 변경  -->
			<mvc:mapping path="/delete"/> <!-- 회원 탈퇴 -->
			<mvc:mapping path="/eupdate"/> <!-- 이메일 변경 -->
			<mvc:mapping path="/logout"/> <!-- 로그아웃  -->
			<mvc:mapping path="/like"/> <!-- 로그아웃  -->

			<beans:ref  bean="loginInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>
	
	<!-- 관리자 인터셉터 객체 생성 -->
	<beans:bean id="adminInterceptor" class="interceptor.AdminInterceptor" />
	
	<!-- 관리자 인터셉터 설정 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<!-- 전체를 지정하고 제외경로 지정 
			<mapping path="/**"/>  
			<exclude-mapping path="join"/>
			-->
			<mvc:mapping path="/pdinsertf"/> <!-- 상품 등록 -->
			<mvc:mapping path="/ninsertf"/> <!-- 공지사항 등록  -->
			<mvc:mapping path="/nupdatef"/> <!-- 공지사항 수정 -->
			<mvc:mapping path="/franchiseinsertf"/> <!-- 브랜드 등록 -->
			<mvc:mapping path="/eventinsertf"/> <!-- 이벤트 등록 -->

			<beans:ref bean="adminInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>
	
	<!-- 스프링 모바일부분. -->
	<mvc:annotation-driven>
		<mvc:argument-resolvers>
			 <beans:bean class="org.springframework.mobile.device.DeviceWebArgumentResolver" />
			 <beans:bean class="org.springframework.mobile.device.site.SitePreferenceWebArgumentResolver" />
		</mvc:argument-resolvers>
	</mvc:annotation-driven>

	<beans:bean class="org.springframework.mobile.device.view.LiteDeviceDelegatingViewResolver">

	  <beans:constructor-arg>
	    <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	      <beans:property name="prefix" value="/WEB-INF/views/" />
	      <beans:property name="suffix" value=".jsp" />
	    </beans:bean>
	  </beans:constructor-arg>

	  <beans:property name="mobilePrefix" value="mobile/" />
	  <beans:property name="tabletPrefix" value="mobile/" />
	  <beans:property name="enableFallback" value="true"/>

	</beans:bean>
	
	<mvc:interceptors>
		<beans:bean class="org.springframework.mobile.device.DeviceResolverHandlerInterceptor"></beans:bean>
		<beans:bean class="org.springframework.mobile.device.site.SitePreferenceHandlerInterceptor"></beans:bean>
	</mvc:interceptors>
	<!-- 스프링 모바일부분 -->
</beans:beans>