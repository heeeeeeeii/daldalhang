<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.ncs.daldal, service, dao, email, vo" />
	
	<!-- 
		 2) Mybatis 설정
			=> SqlSessionFactory -> SqlSessionTemplate
		 2.1) SqlSessionFactory
		 	- MyBatis와 연동 시 DB연결과 SQL실행의 핵심 클래스
		 	- SqlSessionFactoryBean에 의해 생성됨
	-->
	<!-- mybatis SqlSessionFactoryBean -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- MyBatis 설정 파일의 위치를 지정  : 스프링 동작시 같이 동작 하도록 -->
		<beans:property name="dataSource" ref="dataSource"/>
		<!-- SQL 파일의 위치를 지정합니다. --> 
		<beans:property name="configLocation" value="classpath:/mybatis-config.xml"/>
		<!-- mappers 폴더내의 모든 폴더의 *Mapper.xml 을 인식하도록 해줌 -->
		<beans:property name="mapperLocations" value="classpath:/mappers/**/*Mapper.xml"/>		
	</beans:bean>

	<!-- 
		 2.2) SqlSessionTemplate
		 	- DAO의 연결 & Close 기능, SQL문 처리 담당
		 	- sqlSessionFactory를 생성자로 주입해서 설정
	-->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"
				destroy-method="clearCache">
		<beans:constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</beans:bean>
	
	
	<!-- ** Mybatis (DAO 역할을 xml로 정의)
		=> JDBC Connection, Mybatis 설정 : SQL 구문 등
		=> Namespaces (jdbc, mybatis 추가) -->
		
	<!-- MariaDB JDBC DataSource -->
	<beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="org.mariadb.jdbc.Driver" />
		<beans:property name="url" value="jdbc:mariadb://35.223.4.200:3306/daldalhang" />
		<beans:property name="username" value="daldalhang" />
		<beans:property name="password" value="dalhang2020" />
	</beans:bean>
	
	<!-- 메일보내기 -->
    <beans:bean id="mailSender" class = "org.springframework.mail.javamail.JavaMailSenderImpl">
      <beans:property name="host" value="smtp.gmail.com" />
      <beans:property name="port" value="587" />
      <beans:property name="username" value="" /> <!-- 구글 아이디 -->
      <beans:property name="password" value="" /> <!-- 구글 비밀번호 -->
   
      <beans:property name="javaMailProperties">
         <beans:props>
               <beans:prop key="mail.transport.protocol">smtp</beans:prop>
               <beans:prop key="mail.smtp.auth">true</beans:prop>
               <beans:prop key="mail.smtp.starttls.enable">true</beans:prop>
               <beans:prop key="mail.debug">true</beans:prop>
         </beans:props>
      </beans:property>
    </beans:bean>
    
    <!-- 
		ImageUpload = MultipartFile 	
		- 대부분의  Resolver 로 끝나는 클래스의 경우에는 이미 정해져 있기 때문에 (id = multipartResolver) 변경 불가능
		- maxUploadSize 지정하지 않으면 default = -1 이며 크기가 무제한 
	-->	
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="-1" />
	</beans:bean> 
	
	 <!-- Google 소셜 로그인 연결 설정 -->
    <beans:bean id="googleOAuth2Template"
        class="org.springframework.social.google.connect.GoogleOAuth2Template">
  		<beans:constructor-arg value="771757649911-vakhnpdq4sm5bdri1m3pokbm5tj04007.apps.googleusercontent.com" />
  		<beans:constructor-arg value="dbcI3lEYoEm3uo2O12NsZhSm" />
    </beans:bean>
   
 	<beans:bean id="googleOAuth2Parameters" class="org.springframework.social.oauth2.OAuth2Parameters">
 		<beans:property name="scope" value="email"></beans:property>
 		<beans:property name="redirectUri" value="http://localhost:8080/daldal/home"/>
 	</beans:bean>
 	
 	<!-- JsonView -->
	<beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView"/>
	<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
	<beans:property name="order" value="1"></beans:property>
	</beans:bean>
 
</beans:beans>
